the first line of the command line script should always begin with #! /path / to / the interpreter

variable names should have have spaces ifront and at the end of the of = 
eg 
variable_name="some variable"
VARIABLE_NAME="some variable"

acces the value of the variable using $VARIABLE_NAME
or  you can also use ${VARIABLE_NAME} <- this method is suitable if there is data behind the 
variabe name 

the format of the if and the elif and the else statements is such that 
# ----------------------------------------------------------------
if [ conditional expression] 
then 
    commands 
elif [ conditional expression] 
then 
    commands 
else 
    commands 
fi 
# please give a space after writing if [ space expression ] otherwise it wont work properly
# ----------------------------------------------------------------

for VARIABLE_NAME_FOR_FOR_LOOP in ITEM_1 ITEM_2 ...... so on 
do 
    command 1 
    command 2
    command 3
done 

# ----------------------------------------------------------------

$1 $2 $3 $4 
above is how you use the input from the user 
for example is this case for VARIABLE_NAME_FOR_FOR_LOOP in ITEM_1 ITEM_2 ......
ITEM_1 is basically $1 
ITEM_2 is basically $2 

to get all the items from the command line 
you can use the 
$@ command 

# ------------------------------------------------------------------

a basic example of the command to compate is 
if [ "$VARIABLE_NAME" = "SOME_NAME" ] 
then 
    command 

# ------------------------------------------------------------------
#! bin/bash 
COLORS="RED GREEN YELLOW"
for COLOR in COLORS 
do 
    echo "COLOR : $COLOR" 
done 
# ------------------------------------------------------------------
#! bin/bash 
PICTURES=$(ls *jpg) 
DATE=$(date +%F)   #this adds the date infornt of the file name 
for DATED in DATE 
do 
    echo "DATE : $DATED" 
done 
# ------------------------------------------------------------------

to make a shell script executable 
chmod +x <fileName>

for example 
chmod +x ./someFileInTheSameDirectory.sh 

to execute the file use 
./someFileInTheSameDirectory.sh
# ------------------------------------------------------------------

to read the user input 
echo "please enter something here"
read something 
echo "that some thing is $something "

# ----------------------------------------------------------------

commonly used file types checkin in the bash command line tools 
–f:  It returns True if the file exists as a common ( regular ) file.
-d: it returns True if directory exists.
-e: It returns True if any type of file exists.
-c: It returns True if the character file exists.
-r: It returns True if a readable file exists.
–w: It returns True if a writable file exists .
-x: It returns True if an executable file exists.
-p: It returns True if the file exists as a pipe.
-S: It returns True if the file exists as a socket.
-s: it returns True if a file exists and the size of the file is not zero.
-L: It returns True if the file of symbolic link exists .
-g: It returns True if the file exists and hold set group id flag is set..
-G: It returns True if the file exists and holds the same group id that is in process.
 -k: It returns True if the file exists and the sticky bit flag is set.
Now, there are some more parameters for comparison between the two files.
-ef: It returns True if both files exist and indicate the same file. 

#  ----------------------------------------------------------------

$? stores the value of the previous exit status 
if the command executed perfectly then the exit status is 0 
other wise it can be anything between 1 and and 255 


# ------------------------------------------------------------------

&& and || 
use them like this 

command1  && command2
if command1 is not successfully implemented then command2 will be attempted 

#----------------------------------------------------------------

scripting languages are run time languages and they are not precompiled

----------------------------------------------------------------

if you wanna use a function1 that uses another function2 then 
both of them should be declared before calling the function1
but the order of declared functions is not important 
----------------------------------------------------------------

syntax for writing a function is 
function function1 () {
    some command 
    function2 
}
function function2 (){
    command2 
}
function1 
is correct 

function function1 () {
    some command 
    function2 
}
function1 
function function2 (){
    command2 
}
is incorrect 
----------------------------------------------------------------
to create local variables inside fucntions 
use 
local key word 
local VRAIABLE_NAME="some string or something else"

----------------------------------------------------------------

exit is to shell script 
return is to the fucntion 

----------------------------------------------------------------

if no return  is provided 
then the return becomes the exit status of the last command of the function 

----------------------------------------------------------------

to use the positional parameters of the function 
use the $1 $2 $3 $4 $5 $6 $7 $8 $9 ${10} ${11} ${12} ${13} ${14} ${15} ${16} ${17} ${18} ${19} ${20}

----------------------------------------------------------------

$0 is the name of the function 

----------------------------------------------------------------

the | is called the pipe operator 
it is used to pass the output of one command to another command
for example 
ls -l | grep "some string"
does the following
ls -l -> gives the output
grep "some string" -> takes the output of ls -l as input and searches for the string "some string"

pipe opeartor does not work with the functions 

------- ---------------------------------------------------------------
to use the pipe operator with the functions
use the
command1 | command2
command1 | command2 | command3
but not 
function1 | function2 | function3

----------------------------------------------------------------

to use the pipe operator with the functions
use the
fucntion function1 {
    local VARIABLE_NAME=$(ls -l | wc -l)
    echo 
}
function function2 {
    local VARIABLE_NAME
    read VARIABLE_NAME
    echo "net output of the pipe opeartos is $VARIABLE_NAME " 
}

now you can type 
function1 | function2 
----------------------------------------------------------------
ls -l | wc -l 
is not a function 
it is a commadn pipeline 

----------------------------------------------------------------

pbpaste and pbcopy are powerfull tools for connecting the terminal to the clipboard
they are used in mac 
they are most commonly used along side piplelines 
for example
ls -l | pbcopy 
----------------------------------------------------------------

to create an alias just use 
alias alias_name="command" 
for example
alias ll="ls -l"
this is not an permanent change
to make the change permanent
copy and paste the above command in the 
~/.bash_profile 
which is 
~/.zshrc in mac 
type 
nano ~/.zshrc
and paste the command in the file at the end of the file 

----------------------------------------------------------------

to delete an alias
use
unalias alias_name
but this change is not permanent

----------------------------------------------------------------

to paste the content of the clipboard in the terminal
use
pbpaste > file_name
if the file already exists then it will be overwritten
ifthe file does not exist then it will be created

----------------------------------------------------------------

to copy the content of the file to the clipboard
use
pbcopy < file_name

----------------------------------------------------------------

to append the content of the clipboard to the file
use
pbpaste >> file_name

----------------------------------------------------------------

please complete this video 
https://www.youtube.com/watch?v=DJR5RLVOjOw
i have also bookmarked it 

----------------------------------------------------------------
wildcards are insane 
a*.txt -> all the files that start with a and end with .txt
? matches any single character 
* matches any number of characters
sa?.txt -> sa1.txt sa2.txt sa3.txt sa4.txt sa5.txt sa6.txt sa7.txt sa8.txt sa9.txt sa0.txt
----------------------------------------------------------------

ca[nt] will match cat and can but not cab
ca[nt]* will match can , candy , candice , but not cab 
[] contains the list of characters that can be matched

----------------------------------------------------------------
[!  ] will match all the characters that are not in the list 
[!nt] will match all the characters that are not n or t
----------------------------------------------------------------
[[:alpha:]] will match all the alphabets 
[[:digit:]] will match all the digits 
[[:alnum:]] will match all the alphabets and digits 
[[:lower:]] will match all the lower case alphabets 
[[:upper:]] will match all the upper case alphabets 
[[:space:]] will match all the spaces 
[[:punct:]] will match all the punctuations 
[[:graph:]] will match all the printable characters 
[[:print:]] will match all the printable characters and spaces 
[[:cntrl:]] will match all the control characters 
[[:xdigit:]] will match all the hexadecimal digits
similary in 
std::regex
to match any number of digits use 
[[:digit:]]*
two match any two digits use 
[[:digit:]][[:digit:]]

----------------------------------------------------------------
to match the special characters
use the \ before the special character
for example
\* will match the * character
----------------------------------------------------------------
to create a range of allowed character 
use the -
for example 
[a-z]
[A-Z]
[0-9]
----------------------------------------------------------------
wild cards are bascially regular expressions of the shell 
----------------------------------------------------------------
ls *.txt means evertyhing that ends with .txt will be matched
ls *.txt | wc -l will count the number of files that end with .txt
where -l is the long option of the wc command
which in simple terms means 
count the number of lines
----------------------------------------------------------------
wild card operates on the content of current directory
----------------------------------------------------------------
echo -e  $final_string | pbcopy
where 
-e is the option of echo
which means
enable the interpretation of backslash escapes
----------------------------------------------------------------

to use a function in shell script 
first declare the function 
then call the function  
example 
function func () {
    for NAME in $@
    do 
        echo "hello $NAME"
    done
}
--> where the $@ includes all the positional parameters
and then you can call the function 

----------------------------------------------------------------

to call a function on all the paraameters passed to the script using terminal use 
function func () {
    for NAME in $@
    do 
        echo "hello $NAME"
    done
}
func $@

----------------------------------------------------------------

to compare 
use the
-eq
for example 
if [ $1 -eq $2 ]
then 
    echo "both are equal"
else 
    echo "both are not equal"
fi


----------------------------------------------------------------

to compare two numbers use 
-eq

to compare two strings use
== 
and use of double square brackets is reccomended
for integers this is best 
----
 "-eq", "-gt", "-lt"
----
for example 
if [ $1 -eq $2 ]
then 
    echo "both are equal"
else 
    echo "both are not equal"
fi

----------------------------------------------------------------

you can also use == for numbers
but when you do that compare numbers like 
if (( $1 == $2 ))
then 
    echo "both are equal"
else 
    echo "both are not equal"
fi

----------------------------------------------------------------

$# is used to count the number of positional parameters

----------------------------------------------------------------

when you wanna use pb paste in the string you can simply use 
"      -            ---------------     $(pbpaste)    -----------------    "
but not anything else 

----------------------------------------------------------------
we use printf instead of echo 
because printf is more powerful than echo
printf is used to format the output
for example
printf "%s\n" "hello world"
printf "%s\n" "
hello world
-------------------------------------------------------------------
-------------------------------------------------
to push changes in to the local repositoy after staging and commitng them , just enter 
git push origin main
what is does is 
it pushes the changes in the local repository to the remote repository
where main implies the branch name
and origin implies the remote repository name
-------------------------------------------------
-------------------------------------------------

command line can be visualized as instant access to data

-------------------------------------------------
awk in linux is used to process the text files
for example to use awk 
cat file_name | awk '{print $1}'
where $1 is the first column of the file
more examples on how to use awk for processing text files are 
1.
cat file_name | awk '{print $1 $2}'
where $1 is the first column of the file
and $2 is the second column of the file
2.
cat file_name | awk '{print $0} ' 
where $0 is the whole line of the file
-------------------------------------------------

to change the field seperator in awk 
use
cat file_name | awk -F : '{print $1 $2}'
where -F: implies that the field seperator is :

-------------------------------------------------

to increase the space between the columns 
use 
cat file_name | awk -F : '{print $1,$2}' OFS="\t"
where OFS="\t" implies that the output field seperator is tab
or you can use 
cat file_name | awk -F : '{print $1,$2}' OFS="    "
where OFS="    " implies that the output field seperator is 4 spaces
or you can use 
cat file_name | awk -F : '{print $1"      "$2}'
where "      " implies that the output field seperator is 6 spaces
remember to put comma while using OFS
-------------------------------------------------

to use the BEGIN feature to change the OFS 
use 
cat file_name | awk -F : 'BEGIN {OFS="    "} {print $1,$2}'
where OFS="    " implies that the output field seperator is 4 spaces

or 
cat file_name | awk 'BEGIN { FS=:  ; OFS="    "} {print $1,$2}'

-------------------------------------------------
to find all the lines that begin with P 
you can use 
cat file_name | awk '/^P/ {print $0}'
where /^P/ implies that the line begins with P
-------------------------------------------------
to find all the lines that have storng "dev" and "loop"
use in mac 
cat file_name | awk '/storng/ && /dev/ && /loop/ {print $0}'
where /storng/ && /dev/ && /loop/ implies that the line has all the three words
-------------------------------------------------
best way to out put a awk file is 

awk -F : 'BEGIN {OFS="    "} {print $1,$2}' file_name

-------------------------------------------------

to find the lines greater than 7 characters 
use 
awk -F : 'BEGIN {OFS="    "} {if (length($1) > 7) print $1,$2}' file_name
this is a sample line 
awk 'length($0)>7 {print $1 $2}' /Users/sachinjain/Desktop/alldata/medicine/radiology/radiology.txt

-------------------------------------------------

to iterate throught everyline 
use 
awk -F : 'BEGIN {OFS="    "} {for (i=1;i<=NF;i++) print $i}' file_name
where NF is the number of fields in the line
where the commands should be in the curly braces or code block

-------------------------------------------------

to use awk substring function to iterate through every line but between
certain character numbers 
use
awk -F : 'BEGIN {OFS="    "} {for (i=1;i<=NF;i++) print substr($i,1,3)}' file_name
where NF is the number of fields in the line
where substr($i,1,3) implies that the substring of the ith field from 1 to 3 characters

here is a sample command 
awk -F : 'BEGIN {OFS="    "} {for (i=1;i<=NF;i++) print substr($i,1,3)}'  /Users/sachinjain/Desktop/alldata/medicine/radiology/radiology.txt

-------------------------------------------------

to use the number index in the for loop use 
i 
but to use the word at the current index use 
$i
to use the entire line 
use
$0
-------------------------------------------------

to use awk match 
use
awk -F : ' match($0 , /P/ ) {print $0}' file_name
where match($0 , /P/ ) implies that the line has P in it

this is a sample command
awk -F : ' match($0 , /P/ ) {print $0}'  /Users/sachinjain/Desktop/alldata/medicine/radiology/radiology.txt 

-------------------------------------------------

to run multiple commands in the for loop 
use
awk -F : 'BEGIN {OFS="    "} {for (i=1;i<=NF;i++) {print $i; print $i}}' file_name
where NF is the number of fields in the line
where the commands should be in the curly braces or code block

-------------------------------------------------

RSTART is the variable that stores the starting index of the match
use
awk -F : 'BEGIN {OFS="    "} {for (i=1;i<=NF;i++) {match($i , /P/ ) ; print RSTART}}' file_name

-------------------------------------------------

to iterate from rowindex1 to rowindex2 
use 
awk -F : 'NR==1,NR==3 {print $0}' file_name
where NR==1,NR==3 implies that the rows from 1 to 3 will be printed

-------------------------------------------------

to use match function in awk 
use
awk -F : 'BEGIN {OFS="    "} {for (i=1;i<=NF;i++) {match($i , /P/ ) ; print RSTART}}' file_name
where NF is the number of fields in the line
where the commands should be in the curly braces or code block

to match different columns with different patterns
use
-------------------------------------------------

 to use a regular expression in a shell script use
for ITEM in $@
do
    if [[ =~ ^[1-9]$ ]]

-------------------------------------------------

grep -q -F "$TODAYS_DATE" "$HABITTEXTFILE"
where -q implies quiet mode
where -F implies fixed string that is the string is not a regular expression nor does it contain any regular expression characters and special characters are not interpreted as special characters
where $TODAYS_DATE is the date
where $HABITTEXTFILE is the file name
where $TODAYS_DATE is the date
where $HABITTEXTFILE is the file name

exit status of the above command can be used later in the script 
-------------------------------------------------
